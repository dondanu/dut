import java.util.*;

public class Qu1Array {
    int[] array;
    public Qu1Array(int size){
        this.array = new int[size];
    }

    public static void main(String[] args) {
        Qu1Array a1 = new Qu1Array(12);

        // Qu1Array a2 = new Qu1Array(10);

        a1.insertArray(17);
        a1.insertArray(10);
        a1.insertArray(84);
        a1.insertArray(27);
        a1.insertArray(33);
        a1.insertArray(76);
        a1.insertArray(11);
        a1.insertArray(98);

        a1.searchArray(84);
        //a1.searchArray(27);

        a1.delete(27);

    }

    public int searchArray(int element) {
        for (int i = 0; i < array.length; i++) {
            //System.out.println(array[i]);
            if (array[i] == element) {

                System.out.println("Element " + element + " found at index " + i);
                return i;
            }
        }
        System.out.println("Element " + element + " not found in the array.");
        return -1;
    }



    private void insertArray(int val) {
        int len = array.length;
        int index = -1; // Initialize index to -1 indicating insertion not done yet
        for (int i = 0; i < len; i++) {
            if (array[i] == 0) { // Found an empty slot
                array[i] = val;
                index = i; // Update the index where the insertion happened
                break; // Exit the loop since insertion is done
            }
        }
        if (index != -1) {
            System.out.println("Element " + val + " inserted at index " + index);
        } else {
            System.out.println("Array is full. Cannot insert element " + val);
        }
    }
    public void delete(int element) {
        int index = searchArray(element);
        int len=array.length;
        if (index != -1) {
            for (int i = index; i < array.length - 1; i++) {
                array[i] = array[i + 1];
            }
            len--;
            System.out.println("Element " + element + " deleted successfully.");
        } else {
            System.out.println("Element " + element + " not found in the array.");
        }
    }
}





public class SortingAlgorithms {
    public static void main(String[] args) {
        int[] array = {57, 65, 25, 85, 95, 35, 20};

        System.out.println("Original Array:");
        printArray(array);

        // Apply Selection Sort
        int[] selectionSortedArray = selectionSort(array.clone());
        System.out.println("\nSelection Sorted Array:");
        printArray(selectionSortedArray);

        // Apply Merge Sort
        int[] mergeSortedArray = mergeSort(array.clone());
        System.out.println("\nMerge Sorted Array:");
        printArray(mergeSortedArray);

        // Apply Bubble Sort
        int[] bubbleSortedArray = bubbleSort(array.clone());
        System.out.println("\nBubble Sorted Array:");
        printArray(bubbleSortedArray);
    }

    // Selection Sort
    public static int[] selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
        return arr;
    }

    // Merge Sort
    public static int[] mergeSort(int[] arr) {
        if (arr.length <= 1) {
            return arr;
        }
        int mid = arr.length / 2;
        int[] left = mergeSort(Arrays.copyOfRange(arr, 0, mid));
        int[] right = mergeSort(Arrays.copyOfRange(arr, mid, arr.length));
        return merge(left, right);
    }

    private static int[] merge(int[] left, int[] right) {
        int[] result = new int[left.length + right.length];
        int leftPointer = 0, rightPointer = 0, resultPointer = 0;
        while (leftPointer < left.length && rightPointer < right.length) {
            if (left[leftPointer] < right[rightPointer]) {
                result[resultPointer++] = left[leftPointer++];
            } else {
                result[resultPointer++] = right[rightPointer++];
            }
        }
        while (leftPointer < left.length) {
            result[resultPointer++] = left[leftPointer++];
        }
        while (rightPointer < right.length) {
            result[resultPointer++] = right[rightPointer++];
        }
        return result;
    }

    // Bubble Sort
    public static int[] bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }

    // Utility method to print an array
    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
}
}